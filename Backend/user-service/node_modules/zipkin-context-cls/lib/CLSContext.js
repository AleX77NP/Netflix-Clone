"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var cls = require('continuation-local-storage');

var clsHooked = require('cls-hooked');

module.exports = /*#__PURE__*/function () {
  function CLSContext() {
    var namespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'zipkin';
    var supportAsyncAwait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    (0, _classCallCheck2["default"])(this, CLSContext);

    if (supportAsyncAwait) {
      this._session = clsHooked.getNamespace(namespace) || clsHooked.createNamespace(namespace);
    } else {
      this._session = cls.getNamespace(namespace) || cls.createNamespace(namespace);
    }

    var defaultContext = this._session.createContext();

    this._session.enter(defaultContext);
  }

  (0, _createClass2["default"])(CLSContext, [{
    key: "setContext",
    value: function setContext(ctx) {
      this._session.set('zipkin', ctx);
    }
  }, {
    key: "getContext",
    value: function getContext() {
      var currentCtx = this._session.get('zipkin');

      if (currentCtx != null) {
        return currentCtx;
      } else {
        return null; // explicitly return null (not undefined)
      }
    }
  }, {
    key: "scoped",
    value: function scoped(callable) {
      var result;

      this._session.run(function () {
        result = callable();
      });

      return result;
    }
  }, {
    key: "letContext",
    value: function letContext(ctx, callable) {
      var _this = this;

      return this.scoped(function () {
        _this.setContext(ctx);

        return callable();
      });
    } // _bindEmitter is exposed but not meant to be used.
    // It was introduced in the aim to test the async/await support
    // for CLSContext.
    // See https://github.com/openzipkin/zipkin-js/pull/499 for more
    // context

  }, {
    key: "_bindEmitter",
    value: function _bindEmitter(emitter) {
      this._session.bindEmitter(emitter);
    }
  }]);
  return CLSContext;
}();